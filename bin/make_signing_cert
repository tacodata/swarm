#!/bin/sh
# first argument is host, like c1.tacodata.com, mandatory

CERT_DIR=~/ssl-cert

display_help()
{
    echo "Usage: $0 [ -h -v -d CERT_DIR] HOSTNAME"
    echo "  -h help message (this)"
    echo "  -v verbose"
    echo "  -d CERT_DIR  this is the cert directory, must not exist, default : $CERT_DIR"
    echo " HOSTNAME the hostname we are generating the signing cert for"
}


while :
do
    case "$1" in
      -h | --help)
	  display_help  # Call your function
	  # no shifting needed here, we're done.
	  exit 0
	  ;;
      -v | --verbose)
          #  It's better to assign a string, than a number like "verbose=1"
	  #  because if you're debugging script with "bash -x" code like this:
	  #
	  #    if [ "$verbose" ] ...
	  #
	  #  You will see:
	  #
	  #    if [ "verbose" ] ...
	  #
          #  Instead of cryptic
	  #
	  #    if [ "1" ] ...
	  #
	  verbose="verbose"
	  shift
	  ;;
      -d | --directory)
	  # output directory
	  CERT_DIR="$2"
	  shift 2
	  ;;
      --) # End of all options
	  shift
	  break;
	  ;;
      -*)
	  echo "Error: Unknown option: $1" >&2
	  exit 1
	  ;;
      *)  # No more options
	  break
	  ;;
    esac
done

if [ $# -ne 1 ]; then
    echo 'host required'
    display_help
    exit 1
fi

if [ -d $CERT_DIR ]; then
    echo 'Output directory exists, remove it and run this again :'$CERT_DIR
    display_help
    exit 1
fi

HOST=$1

if [ $verbose ]; then
    echo 'HOST is : '$HOST
    echo 'CERT output directory is : '$CERT_DIR
fi

mkdir $CERT_DIR
cd $CERT_DIR
(
openssl genrsa -out ca-key.pem 2048
openssl req -new -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=*" -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem
) 2> /tmp/error_out.$$

if [ $verbose ]; then
    cat /tmp/error_out.$$ 1>&2
fi

rm -f /tmp/error_out.$$
